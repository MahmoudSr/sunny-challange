:root {
  /* colors */

  /* Primary colors */

  --soft-red: hsl(7 99% 70%);
  --yellow: hsl(51 100% 49%);
  --dark-desaturated-cyan: hsl(167 40% 24%); // for graphic design text
  --dark-blue: hsl(198 62% 26%); //photography text
  --dark-moderate-cyan: rgb(129, 214, 197); //footer

  /* Neutral colors */

  --very-dark-desaturated-blue: hsl(212 27% 19%);
  --very-dark-grayish-blue: hsl(213 9% 39%);
  --dark-grayish-blue: hsl(232 10% 55%);
  --grayish-blue: hsl(210 4% 67%);
  --white: hsl(0 0% 100%);

  /* font family */

  --ff-main: "Barlow", sans-serif;
  --ff-secondary: "Fraunces", serif;

  /* font weights */

  --fw-600: 600;
  --fw-700: 700;
  --fw-900: 900;

  /* font sizes */

  --fs-base: 1.125rem;
  --fs-small: 1.5rem;
  --fs-medium: 2rem;
  --fs-large: 2.5rem;
}

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Set core root defaults */
html {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

body {
  /* general styling can be overread in specificity*/

  font-family: var(--ff-main);
  font-size: var(--fs-base);
  font-weight: var(--fw-600);
  color: var(--dark-grayish-blue);

  /* for mobile changed later on */
  text-align: center;
}

h1,
h2,
h3 {
  font-family: var(--ff-secondary);
  line-height: 1.1;
}

h1 {
  font-weight: var(--fw-900);
  color: var(--white);
  font-size: var(--fs-large);

  letter-spacing: 5px;
  margin-top: 1.5em;
}

h2,
h3 {
  font-weight: var(--fw-700);
}

h2 {
  color: var(--very-dark-desaturated-blue);
  font-size: var(--fs-medium);
}

h3 {
  font-size: var(--fs-medium);
  font-size: var(--fs-small);
}

header {
  background-image: url(images/desktop_images/image-header.jpg);
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
  min-height: 100vh;
}

.bg-cherry {
  background-image: url(images/desktop_images/image-graphic-design.jpg);
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
  min-height: 100vh;
}

.bg-orange {
  background-image: url(images/desktop_images/image-photography.jpg);
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
  min-height: 100vh;
}

.on-bg-content {
  margin-top: 20em;
}

/* odd-styling for elements */

.link {
  // position: relative;
  text-decoration: none;
  color: var(--very-dark-desaturated-blue);
  letter-spacing: 2px;

  font-family: var(--ff-secondary);
  font-size: 0.95rem;
  font-weight: var(--fw-900);

  width: max-content;
  margin-inline: auto;

  &--yellow,
  &--red {
    /* for the psuedo elements to make the shade  */

    position: relative;
  }

  &--yellow::before,
  &--red::before {
    content: "";
    position: absolute;

    /* inset is just the short-hand for ( top, right, bottom, left ) */

    inset: auto 0 0 0;

    /* we can also use the filter property but I used opacity */

    // filter: blur(0.3rem);
    opacity: 0.2;

    width: 100%;

    /* using the z-index to put the color (which is the pseudo element under the text) */
    z-index: -1;
  }

  &--yellow::before {
    border: 5px solid var(--yellow);
  }

  &--red::before {
    border: 5px solid var(--soft-red);
  }
}

.avatar {
  border-radius: 50%;
  width: 4rem;
  aspect-ratio: 1;
  object-fit: cover;
}

/* Flex classes */

.flex-column {
  display: flex;
  align-items: center;
  flex-direction: column;

  gap: var(--gap, 1em);
}

/* composition (Layout) */

.container {
  padding: 1.5em;
}

nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
}

.navigation {
  display: flex;
  align-items: center;
  gap: 1em;

  /* reset */
  list-style: none;
  margin: 0;
  padding: 0;

  &__link {
    text-decoration: none;
    color: var(--white);

    &--contact {
      font-family: var(--ff-secondary);

      color: var(--very-dark-desaturated-blue);
      background-color: var(--white);

      display: inline-block;
      padding: 0.5rem 1em;
      border-radius: 1rem;
    }
  }
}

.nav-toggle {
  display: none;
}

.arrow-down {
  padding-block: 3rem;
  margin-inline: auto;
}

.feedback {
  &__title {
    font-family: var(--ff-secondary);
    letter-spacing: 2px;
  }
}

.name {
  font-family: var(--ff-secondary);

  color: var(--very-dark-desaturated-blue);
}

.status {
  margin-top: 0.5rem;
  font-size: 0.95rem;

  color: var(--grayish-blue);
}

.feedback--grid {
  /* funcitonality is used on big screens */

  display: grid;

  /* var(--gap) is not an existing variable but can be used later insted of setting a gap everytime */

  gap: var(--gap, 4rem);
}

.images-grid {
  /* this is reponsive no need to make adjusments for big screens ( NOTE: needs work on tablet sized screens ) */

  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(11rem, 1fr));
}

/* footer */

.footer {
  background-color: var(--dark-moderate-cyan);

  &__navigation {
    display: flex;
    justify-content: space-between;
    gap: var(--gap, 3rem);

    color: var(--dark-desaturated-cyan);

    list-style: none;
    margin: 0;
    padding: 0;
    margin-top: 1em;
  }
}

.socials {
  display: flex;
  gap: var(--gap, 1.5em);

  list-style: none;
  margin: 0;
  padding: 0;

  margin-top: 3em;
}
/* utilities */

.uppercase {
  text-transform: uppercase;
}

.padding-block-4 {
  padding-block: 4em;
}

.padding-block-3 {
  padding-block: 3em;
}

.padding-4 {
  padding: 4em 2em;
}

.on-bg-content--clr-graph {
  color: var(--dark-desaturated-cyan);
}

.on-bg-content--clr-photo {
  color: var(--dark-blue);
}

/* for mobile navigation ( using a max-width on here because it saves us time & code later on ) */

@media (max-width: 50em) {
  .nav-toggle {
    /* might be an odd way but it works perfectly ( got this way from (kevin powell on youtube ) */

    cursor: pointer;
    display: block;
    position: absolute;
    top: 1.75rem;
    right: 1.5rem;

    background-image: url(images/icon-hamburger.svg);
    background-color: transparent;
    background-repeat: no-repeat;

    border: none;

    /* for theaspect-ratio to work a width ( value ) is needed */

    width: 1.5rem;
    aspect-ratio: 1;
  }

  .navigation {
    /* navigation is changed to fit the mobile navigation */

    flex-direction: column;
    justify-content: center;

    background-color: var(--white);

    position: fixed;
    inset: 4rem 2rem 40vh 2rem;

    transform: scale(0);
    transform-origin: top right;
    transition: transform 250ms ease-in-out;

    &__link {
      color: var(--very-dark-desaturated-blue);

      &--contact {
        background-color: var(--yellow);
      }
    }

    /* this is a selector that means any class navigation with a data-visible as a attribute set to ture do the css*/

    &[data-visible="true"] {
      transform: scale(100%);
    }
  }
}

/* min-width can be changed according to what fits best ( this is for the larger screens ) */

@media (min-width: 50em) {
  .flex-row {
    display: flex;
    justify-content: center;
    align-items: center;

    & > * {
      width: 100%;
    }

    /* this is a selector for the second flex-row class */

    &:nth-child(1) {
      flex-direction: row-reverse;
    }
  }

  .container {
    padding: 2rem;
  }

  .feedback--grid {
    grid-template-columns: repeat(3, 1fr);
  }

  .feedback__title {
    grid-row: 1;
    grid-column: span 3;
  }

  /* a class that I did only for the purpose to algin the text to the left ( there is probably a better way to do it ) */

  .content {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    text-align: left;

    margin-inline: auto;

    width: 50ch;
  }

  .link {
    margin: 0;
  }

  /* utilites change */

  .padding-4 {
    padding: 4rem;
  }
}

/* another media query can be added for the tablet view 

( NOTE: THE TABLET VIEW IS NOT INCLUDED IN THIS PROJECT I DID NOT MAKE ANY )  */

// @media (min-width: 35em) {
//   body {
//     background-color: red;
//   }
// }
